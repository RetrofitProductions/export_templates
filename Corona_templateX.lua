{{! -- Version 1.0.1 (For use with Level Director X v1.00 and above)}}
-- Generated by Level Director X v{{SYSTEM_Version}} on {{SYSTEM_DateTime}} --
require("lib.LD_HelperX")

local M={}
-----------------------------------
function M:loadAssets()
-----------------------------------
	local assets={}
	assets.spriteSheetData={}
	
{{#SPRITESHEETS}}
	assets.spriteSheetData['{{SPRITESHEET_Name}}']={}
	assets.spriteSheetData['{{SPRITESHEET_Name}}'].frames ={
{{#FRAMES}}
		{x={{FRAME_X}},y={{FRAME_Y}},width={{FRAME_Width}},height={{FRAME_Height}}},
{{/FRAMES}}
		sheetContentWidth={{SPRITESHEET_Width}},
		sheetContentHeight={{SPRITESHEET_Height}}
	}
{{/SPRITESHEETS}}	


{{#ASSETS}}
	assets['{{ASSET_Name}}']={file ='{{ASSET_File}}',name='{{ASSET_Name}}',class='{{ASSET_Class}}',aX={{ASSET_AnchorX}},aY={{ASSET_AnchorY}},width={{ASSET_Width}},height={{ASSET_Height}},frame={{ASSET_Frame}},spriteSheetName='{{ASSET_SpriteSheetName}}',frameCount={{ASSET_FrameCount}},
		{{#SEQUENCEDATA}}
		sequenceData={{{#SEQUENCES}}{name='{{SEQUENCE_Name}}',frames={ {{SEQUENCE_Frames}} },time ={{SEQUENCE_Duration}},loopCount={{SEQUENCE_LoopCount}},loopDirection='{{SEQUENCE_LoopDirection}}' },{{/SEQUENCES}}},
		sequenceInfo={default='{{ASSET_AnimationDefault}}',play={{ASSET_AnimationPlay}} },
		{{/SEQUENCEDATA}}
		{{#USERPROPS}}
		{{USERPROP_Key}}='{{USERPROP_Value}}',		
		{{/USERPROPS}}
		{{#PHYSICS}}physics={isEnabled={{ASSET_Physics_IsEnabled}},source='Asset',bodyType='{{ASSET_Physics_BodyType}}',isFixedRotation={{ASSET_Physics_IsFixedRotation}},isSleepingAllowed={{ASSET_Physics_IsSleepingAllowed}},isSensor={{ASSET_Physics_IsSensor}},isBullet={{ASSET_Physics_IsBullet}},shapes={{{#SHAPES}}{bodyShape='{{SHAPE_BodyShape}}',shape={{{SHAPE_Shape}}},bounce={{SHAPE_Bounce}},friction={{SHAPE_Friction}},density={{SHAPE_Density}},radius={{SHAPE_Radius}},categoryBits={{SHAPE_CategoryBits}},maskBits={{SHAPE_MaskBits}},groupIndex={{SHAPE_GroupIndex}}},{{/SHAPES}}}	} {{/PHYSICS}} }
{{/ASSETS}}
	return assets
end -- loadAssets {{BI_NEWLINE}}
{{#LEVEL}}
------------------------------------------
function M:createLevel(LD_Helper_Instance)
------------------------------------------
	local instance=LD_Helper_Instance
	local objProps={}
	local level={}
    local obj=nil
	local k=0
	local objects = nil 
	
	if (instance.viewGroup == nil) then
		level.view=display.newGroup() 
	else
		level.view=instance.viewGroup
	end
	
	level.view.anchorChildren =false 
	
	display.setDefault( 'background',{{LEVEL_BackColorR}}/255,{{LEVEL_BackColorG}}/255,{{LEVEL_BackColorB}}/255,{{LEVEL_BackColorA}}/255)
	display.setDefault( "anchorX",{{LEVEL_AnchorX}} )
	display.setDefault( "anchorY",{{LEVEL_AnchorY}} )	
	display.setDrawMode("wireframe",{{LEVEL_WireFrame}})
	
	level.name='{{LEVEL_Name}}' 
	
	-- Load Assets
	level.assets=self:loadAssets()

	-- Physics properties
	physics.setGravity({{LEVEL_GravityX}},{{LEVEL_GravityY}}) 
	physics.setDrawMode('{{LEVEL_DebugMode}}')
	physics.setPositionIterations({{LEVEL_PositionIterations}})	
	physics.setVelocityIterations({{LEVEL_VelocityIterations}})	
	
	level.parallaxEnabled={{LEVEL_ParallaxEnabled}}
	
{{#LEVEL_USERPROPS}}
	level.{{LEVEL_USERPROP_Key}}='{{LEVEL_USERPROP_Value}}'
{{/LEVEL_USERPROPS}}
	
	-- Layers --
	level.layers={} 
	
{{#LAYERS}}
	---- {{LAYER_Name}} ------------------------------------------------------------------------------------
	level.layers['{{LAYER_Name}}']={} 
	level.layers['{{LAYER_Name}}'].view=display.newGroup() 
	level.layers['{{LAYER_Name}}'].name='{{LAYER_Name}}' 
	
	if (level.parallaxEnabled) then
		level.layers['{{LAYER_Name}}'].speed={x={{LAYER_ParallaxSpeedX}},y={{LAYER_ParallaxSpeedY}}}
		level.layers['{{LAYER_Name}}'].repeated={{LAYER_ParallaxRepeat}}
		level.layers['{{LAYER_Name}}'].cullingMethod={{LAYER_ParallaxCulling}}
	else
		level.layers['{{LAYER_Name}}'].cullingMethod=0 
	end
	
	level.layers['{{LAYER_Name}}'].objects={} 
{{#LAYER_USERPROPS}}
	level.layers['{{LAYER_Name}}'].{{LAYER_USERPROP_Key}}='{{LAYER_USERPROP_Value}}'
{{/LAYER_USERPROPS}}
	objects = {
{{#OBJECTS}}
	{name='{{OBJECT_Name}}',objType='{{OBJECT_Type}}',class='{{OBJECT_Class}}',width={{OBJECT_Width}},height={{OBJECT_Height}},x={{OBJECT_X}},y={{OBJECT_Y}},xScale={{OBJECT_xScale}}*{{OBJECT_xFlip}},yScale={{OBJECT_yScale}}*{{OBJECT_yFlip}},assetName='{{OBJECT_AssetName}}',
{{#OBJECT_GENERAL}}
		rotation={{OBJECT_Rotation}},enableDrag={{OBJECT_EnableDrag}},anchorX={{OBJECT_AnchorX}},anchorY={{OBJECT_AnchorY}},alpha={{OBJECT_Alpha}},isVisible={{OBJECT_Visible}},blendMode='{{OBJECT_BlendMode}}',
{{/OBJECT_GENERAL}}
{{#OBJECT_TEXT}}
		textProps={text='{{OBJECT_Text}}',font='{{OBJECT_FontName}}',size={{OBJECT_FontSize}},embossed={{OBJECT_Embossed}},embossHighlightColorR={{OBJECT_EmbossHighlightColorR}}/255,embossHighlightColorG={{OBJECT_EmbossHighlightColorG}}/255,embossHighlightColorB={{OBJECT_EmbossHighlightColorB}}/255,embossHighlightColorA={{OBJECT_EmbossHighlightColorA}}/255,embossShadowColorR={{OBJECT_EmbossShadowColorR}}/255,embossShadowColorG={{OBJECT_EmbossShadowColorG}}/255,embossShadowColorB={{OBJECT_EmbossShadowColorB}}/255,embossShadowColorA={{OBJECT_EmbossShadowColorA}}/255},
{{/OBJECT_TEXT}}
{{#OBJECT_STYLE}}
		styleProps={radius={{OBJECT_Radius}},cornerRadius={{OBJECT_CornerRadius}},strokeWidth={{OBJECT_StrokeWidth}},strokeColorR={{OBJECT_StrokeColorR}}/255,strokeColorG={{OBJECT_StrokeColorG}}/255,strokeColorB={{OBJECT_StrokeColorB}}/255,strokeColorA={{OBJECT_StrokeColorA}}/255,fillColorR={{OBJECT_FillColorR}}/255,fillColorG={{OBJECT_FillColorG}}/255,fillColorB={{OBJECT_FillColorB}}/255,fillColorA={{OBJECT_FillColorA}}/255},
		fillProps ={fillType={{OBJECT_FillType}},fillAssetName='{{OBJECT_FillAssetName}}',fillFrame={{OBJECT_FillFrame}}},
		gradientProps={direction={{OBJECT_GradientDirection}},fillColorR={{OBJECT_GradientColorR}}/255,fillColorG={{OBJECT_GradientColorG}}/255,fillColorB={{OBJECT_GradientColorB}}/255,fillColorA={{OBJECT_GradientColorA}}/255},
{{/OBJECT_STYLE}}
{{#OBJECT_BUTTON}}
		btnProps={textColorR={{OBJECT_BtnTextColorR}}/255,textColorG={{OBJECT_BtnTextColorG}}/255,textColorB={{OBJECT_BtnTextColorB}}/255,textColorA={{OBJECT_BtnTextColorA}}/255,fillType={{OBJECT_FillType}},fillAssetName='{{OBJECT_FillOverAssetName}}',fillFrame={{OBJECT_FillOverFrame}},styleProps	= {cornerRadius={{OBJECT_OCornerRadius}},strokeWidth={{OBJECT_OStrokeWidth}},strokeColorR={{OBJECT_OStrokeColorR}}/255,strokeColorG={{OBJECT_OStrokeColorG}}/255,strokeColorB={{OBJECT_OStrokeColorB}}/255,strokeColorA={{OBJECT_OStrokeColorA}}/255,fillColorR={{OBJECT_OFillColorR}}/255,fillColorG={{OBJECT_OFillColorG}}/255,fillColorB={{OBJECT_OFillColorB}}/255,fillColorA={{OBJECT_OFillColorA}}/255}},
{{/OBJECT_BUTTON}}
{{#OBJECT_POINT}}
		pointProps={outputType='{{OBJECT_OutputType}}',xPoints={{{OBJECT_xPoints}}},yPoints={ {{OBJECT_yPoints}}}},
{{/OBJECT_POINT}}
{{#OBJECT_FOLLOWPATH}}
		followPathProps={srcObj='{{OBJECT_PathSrc}}',path='{{OBJECT_PathDst}}',direction={{OBJECT_PathDirection}},rotate={{OBJECT_PathRotate}},rebound={{OBJECT_PathRebound}},repeats={{OBJECT_PathRepeats}},delay={{OBJECT_PathDelay}},autoStart={{OBJECT_PathAutoStart}},xFlip={{OBJECT_PathXFlip}},yFlip={{OBJECT_PathYFlip}}},
{{/OBJECT_FOLLOWPATH}}
{{#OBJECT_JOINT}}
		jointProps={jointType='{{OBJECT_JointType}}',srcObjectName='{{OBJECT_SrcObjectName}}',anchorA={x={{OBJECT_AnchorAX}},y={{OBJECT_AnchorAY}} },dstObjectName='{{OBJECT_DstObjectName}}',anchorB={x={{OBJECT_AnchorBX}},y={{OBJECT_AnchorBY}} },paramA={{OBJECT_ParamA}},paramB={{OBJECT_ParamB}},motorSpeed={{OBJECT_MotorSpeed}},maxMotorTorque={{OBJECT_MaxMotorTorque}},limit1={{OBJECT_Limit1}},limit2={{OBJECT_Limit2}},limitEnabled={{OBJECT_LimitEnabled}},motorEnabled ={{OBJECT_MotorEnabled}}},
{{/OBJECT_JOINT}}
{{#OBJECT_PHYSICS}}
		physics={isEnabled={{OBJECT_Physics_IsEnabled}},source='Object',bodyType='{{OBJECT_Physics_BodyType}}',isFixedRotation={{OBJECT_Physics_IsFixedRotation}},isSleepingAllowed={{OBJECT_Physics_IsSleepingAllowed}},isSensor={{OBJECT_Physics_IsSensor}},isBullet={{OBJECT_Physics_IsBullet}},gravityScale={{OBJECT_Physics_GravityScale}},
		shapes={{{#SHAPES}}{bodyShape='{{SHAPE_BodyShape}}',shape={{{SHAPE_Shape}} },bounce={{SHAPE_Bounce}},friction={{SHAPE_Friction}},density={{SHAPE_Density}},radius={{SHAPE_Radius}},categoryBits={{SHAPE_CategoryBits}},maskBits={{SHAPE_MaskBits}},groupIndex={{SHAPE_GroupIndex}} },{{/SHAPES}}}}
{{/OBJECT_PHYSICS}}
		},
{{#OBJECT_USERPROPS}}
	obj.view.{{OBJECT_USERPROP_Key}}='{{OBJECT_USERPROP_Value}}'
{{/OBJECT_USERPROPS}}
{{/OBJECTS}}
	}
	-- add objects to layer
	for k, objProps in pairs (objects) do
		instance:createObject(level.layers['{{LAYER_Name}}'], objProps ,level.assets)
	end
	
	instance:insertLayer(level,level.layers['{{LAYER_Name}}'])
	
{{/LAYERS}}
	--level.ldVersion={{SYSTEM_Version}}	-- Level Director Version
	
	-- Parallax (after layers)
	level.canvasWidth={{LEVEL_CanvasWidth}}
	level.canvasHeight={{LEVEL_CanvasHeight}}
	
	if level.parallaxEnabled then
		level.parallaxInfinite={{LEVEL_ParallaxInfinite}}
		level.parallaxDamping={{LEVEL_ParallaxDamping}}
		instance:createParallax(level)
	end

	return level
end -- createLevel
{{/LEVEL}}	
return M

